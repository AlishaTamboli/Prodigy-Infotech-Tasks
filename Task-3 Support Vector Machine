import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from skimage.feature import hog
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Constants
IMAGE_SIZE = 64
NUM_IMAGES = 500  # Number of images per class

# Function to create synthetic images
def create_synthetic_images(num_images, label):
    images = []
    labels = []
    for _ in range(num_images):
        img = np.random.rand(IMAGE_SIZE, IMAGE_SIZE, 3)  # Random noise image
        if label == 0:  # Cat
            cv2.putText(img, 'C', (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (1, 1, 1), 2, cv2.LINE_AA)
        else:  # Dog
            cv2.putText(img, 'D', (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (1, 1, 1), 2, cv2.LINE_AA)
        images.append(img)
        labels.append(label)
    return images, labels

# Create synthetic images
cat_images, cat_labels = create_synthetic_images(NUM_IMAGES, 0)
dog_images, dog_labels = create_synthetic_images(NUM_IMAGES, 1)

# Combine images and labels
images = cat_images + dog_images
labels = cat_labels + dog_labels

# Convert to numpy arrays
images = np.array(images)
labels = np.array(labels)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

# Function to extract HOG features
def extract_hog_features(images):
    hog_features = []
    for image in images:
        feature, _ = hog(image, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True, multichannel=True)
        hog_features.append(feature)
    return np.array(hog_features)

# Extract HOG features from training and testing sets
X_train_hog = extract_hog_features(X_train)
X_test_hog = extract_hog_features(X_test)

# Train SVM
svm = SVC(kernel='linear')
svm.fit(X_train_hog, y_train)

# Predict on the test set
y_pred = svm.predict(X_test_hog)

# Evaluate the model
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(classification_report(y_test, y_pred, target_names=['Cat', 'Dog']))

# Plot some examples
def plot_examples(images, labels, predictions, num_examples=10):
    plt.figure(figsize=(10, 10))
    for i in range(num_examples):
        plt.subplot(5, 5, i + 1)
        plt.imshow(images[i])
        plt.title(f"Label: {labels[i]}\nPred: {predictions[i]}")
        plt.axis('off')
    plt.show()

plot_examples(X_test, y_test, y_pred)
